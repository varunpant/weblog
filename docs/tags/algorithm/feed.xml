<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>algorithm on Varun Pant</title><link>https://varunpant.com/tags/algorithm/</link><description>Recent content in algorithm on Varun Pant</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 15 Oct 2017 00:00:00 +0000</lastBuildDate><atom:link href="https://varunpant.com/tags/algorithm/feed.xml" rel="self" type="application/rss+xml"/><item><title>minimum insertions to form a palindrome</title><link>https://varunpant.com/posts/minimum-insertions-to-form-a-palindrome/</link><pubDate>Sun, 15 Oct 2017 00:00:00 +0000</pubDate><guid>https://varunpant.com/posts/minimum-insertions-to-form-a-palindrome/</guid><description>Brute-force approach Here I present a few approaches to deduce &amp;ldquo;minimum insertions&amp;rdquo; required to convert a string into a palindrome.
The basic brute force approach is quite simple, given a string with length L, start comparing, the first character from left and the last character while scanning inwards.
Here is a basic test for a palindrome.
L = len(s) for i in range(L): if s[i] != s[L - i - 1]: return False,i,L-i -1 return True,0,0 The above code returns True if the string is a palindrome or returns False with mismatching indices.</description></item><item><title>print two-dimensional array in spiral order</title><link>https://varunpant.com/posts/print-two-dimensional-array-in-spiral-order/</link><pubDate>Wed, 15 Oct 2014 00:00:00 +0000</pubDate><guid>https://varunpant.com/posts/print-two-dimensional-array-in-spiral-order/</guid><description>So I saw this problem in a book today about printing a 2d matrix in spiral order
Here are two solutions to it
Solution one. def printSpiralTL(m,x1,y1,x2,y2): for i in range(x1,x2): print m[y1][i] for j in range(y1+1,y2+1): print m[j][x2-1] if x2-x1 &amp;gt; 0: printSpiralBL(m, x1, y1 + 1, x2-1, y2) def printSpiralBL(m,x1,y1,x2,y2): for i in range(x2-1,x1-1,-1): print m[y2][i] for j in range(y2-1,y1-1,-1): print m[j][x1] if x2-x1 &amp;gt; 0: printSpiralTL(m, x1+1, y1, x2, y2-1) m = [ [1, 2, 3, 4], [5, 6, 7, 8], [9, 0, 1, 2], [3, 4, 5, 6], [7, 8, 9, 1] ] Output:</description></item><item><title>merge two sorted arrays in python</title><link>https://varunpant.com/posts/merge-two-sorted-arrays-in-python/</link><pubDate>Sat, 11 Oct 2014 00:00:00 +0000</pubDate><guid>https://varunpant.com/posts/merge-two-sorted-arrays-in-python/</guid><description>Here is a quick code snippet to merge two sorted arrays in python
merged = [] l = 0 r = 0 for i in range(len(a)+len(b) ): lval = None rval = None if l &amp;lt; len(a): lval = a[l] if r &amp;lt; len(b): rval = b[r] if (lval &amp;lt; rval and rval and lval) or rval == None: merged.append(lval) l+=1 elif (lval &amp;gt;= rval and rval and lval)or lval == None: merged.</description></item></channel></rss>