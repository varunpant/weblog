<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Web.py on Varun Pant</title><link>https://varunpant.com/tags/web.py/</link><description>Recent content in Web.py on Varun Pant</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 23 Jan 2013 00:00:00 +0000</lastBuildDate><atom:link href="https://varunpant.com/tags/web.py/feed.xml" rel="self" type="application/rss+xml"/><item><title>Basic authentication in web.py via attribute</title><link>https://varunpant.com/posts/basic-authentication-in-web-py-via-attribute/</link><pubDate>Wed, 23 Jan 2013 00:00:00 +0000</pubDate><guid>https://varunpant.com/posts/basic-authentication-in-web-py-via-attribute/</guid><description>
&lt;p&gt;Here I demonstrate the process of &lt;a href="http://en.wikipedia.org/wiki/Basic_access_authentication"&gt;Basic Authentication&lt;/a&gt; in &lt;a href="http://webpy.org/"&gt;web.py&lt;/a&gt; python web framework.&lt;/p&gt;
&lt;p&gt;There is a proof of concept article &lt;a href="http://webpy.org/cookbook/userauthbasic"&gt;provided&lt;/a&gt; in the main site,however I just thought doing the same via an attribute might be a cleaner solution.&lt;/p&gt;
&lt;p&gt;HTTP Basic authentication implementation is one of the easiest ways to secure web pages because it doesn&amp;rsquo;t require cookies, session handling, or the development of login pages. Rather, HTTP Basic authentication uses static headers which means that no handshakes have to be done in anticipation,however the n the credentials are passed as &lt;a href="http://en.wikipedia.org/wiki/Plaintext"&gt;plain-text &lt;/a&gt;and could be intercepted.&lt;/p&gt;</description></item></channel></rss>