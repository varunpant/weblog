<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Datastructure on Varun Pant</title><link>https://varunpant.com/tags/datastructure/</link><description>Recent content in Datastructure on Varun Pant</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 26 Jan 2014 00:00:00 +0000</lastBuildDate><atom:link href="https://varunpant.com/tags/datastructure/feed.xml" rel="self" type="application/rss+xml"/><item><title>Ternary search tree</title><link>https://varunpant.com/posts/ternary-search-tree/</link><pubDate>Sun, 26 Jan 2014 00:00:00 +0000</pubDate><guid>https://varunpant.com/posts/ternary-search-tree/</guid><description>
&lt;p&gt;In &lt;a href="http://en.wikipedia.org/wiki/Computer_science"&gt;computer science&lt;/a&gt;, a &lt;strong&gt;ternary search tree&lt;/strong&gt; is a type of &lt;a href="http://en.wikipedia.org/wiki/Trie"&gt;prefix tree&lt;/a&gt; where nodes are arranged as a &lt;a href="http://en.wikipedia.org/wiki/Binary_search_tree"&gt;binary search tree&lt;/a&gt;. Like other prefix trees, a ternary search tree can be used as an &lt;a href="http://en.wikipedia.org/wiki/Associative_map"&gt;associative map&lt;/a&gt; structure with the ability for incremental &lt;a href="http://en.wikipedia.org/wiki/String_search"&gt;string search&lt;/a&gt;. However, ternary search trees are more space efficient compared to standard prefix trees, at the cost of speed. Common applications for ternary search trees include &lt;a href="http://en.wikipedia.org/wiki/Spell-check"&gt;spell-checking&lt;/a&gt; and &lt;a href="http://en.wikipedia.org/wiki/Auto-completion"&gt;auto-completion&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As with other trie data structures, each node in a ternary search tree represents a prefix of the stored strings. All strings in the middle subtree of a node start with that prefix.&lt;/p&gt;</description></item></channel></rss>