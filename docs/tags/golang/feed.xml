<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>golang on Varun Pant</title><link>https://varunpant.com/tags/golang/</link><description>Recent content in golang on Varun Pant</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 07 Sep 2017 00:00:00 +0000</lastBuildDate><atom:link href="https://varunpant.com/tags/golang/feed.xml" rel="self" type="application/rss+xml"/><item><title>Inverse weighted distance interpolation in golang</title><link>https://varunpant.com/posts/inverse-weighted-distance-interpolation-in-golang/</link><pubDate>Thu, 07 Sep 2017 00:00:00 +0000</pubDate><guid>https://varunpant.com/posts/inverse-weighted-distance-interpolation-in-golang/</guid><description>Inverse distance weighting (IDW) is a type of deterministic method for multivariate interpolation with a known scattered set of points. The assigned values to unknown points are calculated with a weighted average of the values available at the known points.
This technique, explicitly makes the assumption that things that are close to one another are more alike than those that are farther apart. To predict a value for any unmeasured location, IDW uses the measured values surrounding the prediction location.</description></item><item><title>basic sorting algorithms implemented in golang</title><link>https://varunpant.com/posts/basic-sorting-algorithms-implemented-in-golang/</link><pubDate>Mon, 04 Sep 2017 00:00:00 +0000</pubDate><guid>https://varunpant.com/posts/basic-sorting-algorithms-implemented-in-golang/</guid><description>This post includes go-lang based implementation of some of the classic sorting algorithms.
This article primarily, has been written, as an academic exercise, to not forget the basic principles of sorting.
Bubble Sort wiki Bubble sort is perhaps the simplest of all sorting algorithms, the basic principle is to bubble up the largest (or the smallest) and then the second largest and then the third largest and so on. Each bubble takes the full sweep of the list, hence best-case, average-case as well as the worst-case performance are all O(n2)</description></item><item><title>reading and writing binary files in go lang</title><link>https://varunpant.com/posts/reading-and-writing-binary-files-in-go-lang/</link><pubDate>Tue, 29 Aug 2017 00:00:00 +0000</pubDate><guid>https://varunpant.com/posts/reading-and-writing-binary-files-in-go-lang/</guid><description>Reading and writing binary files can often be a fast and very efficient alternatives to csv. They obviously have their challenges, however in this post I intent to present a very basic example of saving models (struct) into binary file and later reading it.
package main import ( &amp;#34;log&amp;#34; &amp;#34;os&amp;#34; &amp;#34;encoding/binary&amp;#34; &amp;#34;bytes&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;math/rand&amp;#34; &amp;#34;time&amp;#34; ) //this type represnts a record with three fields type payload struct { One float32 Two float64 Three uint32 } func main() { writeFile() readFile() } func readFile() { file, err := os.</description></item><item><title>Create linear color gradient in go</title><link>https://varunpant.com/posts/create-linear-color-gradient-in-go/</link><pubDate>Mon, 28 Aug 2017 00:00:00 +0000</pubDate><guid>https://varunpant.com/posts/create-linear-color-gradient-in-go/</guid><description>Go doesn't have any builtin gradient functions to paint/fill the background of a raster, however it has all the required primitives one needs to create a very basic linear gradient.
Here is a basic code which defines a 256 x 256 image, then calculates the value of each pixel in the raster based on a linear interpolation formula.
import ( &amp;quot;image&amp;quot; &amp;quot;image/color&amp;quot; &amp;quot;image/png&amp;quot; &amp;quot;log&amp;quot; &amp;quot;os&amp;quot; &amp;quot;os/exec&amp;quot; ) var( colorB = [3]float64{248, 54, 0} colorA = [3]float64{254, 140, 0} ) var( width = 256 height = 256 max = float64(width) ) func linearGradient(x, y float64) (uint8, uint8, uint8) { d := x/max r := colorA[0] + d * (colorB[0] - colorA[0]) g := colorA[1] + d * (colorB[1] - colorA[1]) b := colorA[2] + d * (colorB[2] - colorA[2]) return uint8(r), uint8(g), uint8(b) } func main() { var w, h int = width, height dst := image.</description></item><item><title>How to read a csv file in go</title><link>https://varunpant.com/posts/how-to-read-a-csv-file-in-go/</link><pubDate>Tue, 30 Aug 2016 00:00:00 +0000</pubDate><guid>https://varunpant.com/posts/how-to-read-a-csv-file-in-go/</guid><description>One of the most common task for a programmer is either to read or write a csv file
Read a csv file package main import ( &amp;quot;bufio&amp;quot; &amp;quot;encoding/csv&amp;quot; &amp;quot;os&amp;quot; &amp;quot;fmt&amp;quot; &amp;quot;io&amp;quot; ) func main() { // Load a csv file. f, \_ := os.Open(&amp;quot;/path/to/my/csv/file.csv&amp;quot;) // Create a new reader. r := csv.NewReader(bufio.NewReader(f)) //define seperator r.Comma = ',' for { record, err := r.Read() // Stop at EOF. if err == io.</description></item><item><title>Install all Go project dependencies in one command</title><link>https://varunpant.com/posts/install-all-go-project-dependencies-in-one-command/</link><pubDate>Tue, 25 Aug 2015 00:00:00 +0000</pubDate><guid>https://varunpant.com/posts/install-all-go-project-dependencies-in-one-command/</guid><description>So if you are looking to compile you go project on your server, you would probably need to worry about any third party dependencies.
Here is quick recursive way to do that
go get ./&amp;hellip;
Hope this helps</description></item></channel></rss>