<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>algorithms on Varun Pant</title><link>https://varunpant.com/tags/algorithms/</link><description>Recent content in algorithms on Varun Pant</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 07 Sep 2017 00:00:00 +0000</lastBuildDate><atom:link href="https://varunpant.com/tags/algorithms/feed.xml" rel="self" type="application/rss+xml"/><item><title>Inverse weighted distance interpolation in golang</title><link>https://varunpant.com/posts/inverse-weighted-distance-interpolation-in-golang/</link><pubDate>Thu, 07 Sep 2017 00:00:00 +0000</pubDate><guid>https://varunpant.com/posts/inverse-weighted-distance-interpolation-in-golang/</guid><description>Inverse distance weighting (IDW) is a type of deterministic method for multivariate interpolation with a known scattered set of points. The assigned values to unknown points are calculated with a weighted average of the values available at the known points.
This technique, explicitly makes the assumption that things that are close to one another are more alike than those that are farther apart. To predict a value for any unmeasured location, IDW uses the measured values surrounding the prediction location.</description></item><item><title>basic sorting algorithms implemented in golang</title><link>https://varunpant.com/posts/basic-sorting-algorithms-implemented-in-golang/</link><pubDate>Mon, 04 Sep 2017 00:00:00 +0000</pubDate><guid>https://varunpant.com/posts/basic-sorting-algorithms-implemented-in-golang/</guid><description>This post includes go-lang based implementation of some of the classic sorting algorithms.
This article primarily, has been written, as an academic exercise, to not forget the basic principles of sorting.
Bubble Sort wiki Bubble sort is perhaps the simplest of all sorting algorithms, the basic principle is to bubble up the largest (or the smallest) and then the second largest and then the third largest and so on. Each bubble takes the full sweep of the list, hence best-case, average-case as well as the worst-case performance are all O(n2)</description></item><item><title>merge sort in python</title><link>https://varunpant.com/posts/merge-sort-in-python/</link><pubDate>Sun, 23 Jul 2017 00:00:00 +0000</pubDate><guid>https://varunpant.com/posts/merge-sort-in-python/</guid><description>Many useful algorithms are recursive in structure: to solve a given problem, they call themselves recursively one or more times to deal with closely related subproblems. These algorithms typically follow a divide-and-conquer approach: they break the problem into several subproblems that are similar to the original problem but smaller in size, solve the subproblems recursively, and then combine these solutions to create a solution to the original problem.
The divide-and-conquer paradigm involves three steps at each level of the recursion:</description></item><item><title>Binary Search Tree in python</title><link>https://varunpant.com/posts/binary-search-tree-in-python/</link><pubDate>Mon, 01 Aug 2016 00:00:00 +0000</pubDate><guid>https://varunpant.com/posts/binary-search-tree-in-python/</guid><description>BST data structure supports many dynamic-set operations including
Search Minimum Maximum Predecessor Successor Insert Delete These basic operations allow us to treat this data structure both as a dictionary and as a priority queue.
Basic operations on a binary tree takes time proportional to the height of the tree, O(lg n) [worst case] and even O(n) if the tree is a linear chain.
If you want to learn more about practical application of these trees check this post out.</description></item><item><title>Heap Sort in python</title><link>https://varunpant.com/posts/heap-sort/</link><pubDate>Mon, 25 Jul 2016 00:00:00 +0000</pubDate><guid>https://varunpant.com/posts/heap-sort/</guid><description>The (binary) heap data structure is an array object that we can view as a nearly complete binary tree. Each node of the tree corresponds to an element of the array. The tree is completely filled on all levels except possibly the lowest, which is filled from the left up to a point. An array A that represents a heap is an object with two attributes:
length, which (as usual) gives the number of elements in the array.</description></item><item><title>Insertion sort in python</title><link>https://varunpant.com/posts/insertion-sort-in-python/</link><pubDate>Fri, 22 Jul 2016 00:00:00 +0000</pubDate><guid>https://varunpant.com/posts/insertion-sort-in-python/</guid><description>Insertion sort, is an efficient algorithm for sorting a small number of elements.
Insertion sort works the way many people sort a hand of playing cards. We start with an empty left hand and the cards face down on the table. We then remove one card at a time from the table and insert it into the correct position in the left hand.
To find the correct position for a card, we compare it with each of the cards already in the hand, from right to left.</description></item><item><title>Bubble-sort in python</title><link>https://varunpant.com/posts/bubble-sort-in-python/</link><pubDate>Thu, 23 Jul 2015 00:00:00 +0000</pubDate><guid>https://varunpant.com/posts/bubble-sort-in-python/</guid><description>Bubble sort is a sorting algo that repeatedly steps through the list to be sorted, compares each pair of adjacent items and swaps them if they are in the wrong order.
It is a popular, but inefficient sorting algo, it has worst-case and average complexity both Ðž(n2), where n is the number of items being sorted.
Here is an implementation in python
count = len(B) for i in xrange(count): for j in xrange(count-1,i,-1): #print &amp;#34;compairing %i with %i&amp;#34;%(B[j],B[j-1]) if B[j] &amp;lt; B[j - 1]: temp = B[j] B[j] = B[j - 1] B[j - 1] = temp #print &amp;#34;Swapping %i with %i&amp;#34;%(B[j],B[j-1]) #print &amp;#34;Transformed Array: &amp;#34; , B B = [6,5,3,1,8,7,2,4] print &amp;#34;Unsorted: &amp;#34;, B bubbleSort(B) print &amp;#34;Bubble Sorted: &amp;#34;, B Hope this helps</description></item><item><title>longest palindrome in a string</title><link>https://varunpant.com/posts/longest-palindrome-in-a-string/</link><pubDate>Wed, 15 Oct 2014 00:00:00 +0000</pubDate><guid>https://varunpant.com/posts/longest-palindrome-in-a-string/</guid><description>def isPailenDrome(s): if len(s)==1: return False L = len(s) for i in range(L): if s[i] != s[L-1-i]: return False return True def longestPalindrome(s): L = len(s) if len(s)&amp;lt;=1: return s if isPailenDrome(s): return s p = {} for u in range(L): for v in range(u+1,L+1): k = s[u:v] # print k,isPailenDrome(k) if isPailenDrome(k): p[len(k)] = k if len(p) &amp;gt; 0: return p[sorted(p,reverse = True)[0]] return s[0]</description></item><item><title>Factorial in python</title><link>https://varunpant.com/posts/factorial-in-python/</link><pubDate>Tue, 14 Aug 2012 00:00:00 +0000</pubDate><guid>https://varunpant.com/posts/factorial-in-python/</guid><description>Mathematically, the formula for the factorial is as follows. If n is an integer greater than or equal to 1, then n ! = n ( n - 1)( n - 2)( n - 3) &amp;hellip; (3)(2)(1) If p = 0, then p ! = 1 by convention.
def factorial(n): if n == 0: return 1 else: return n * factorial(n-1) Hope this helps</description></item></channel></rss>